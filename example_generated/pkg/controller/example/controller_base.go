// This file was automatically generated by controller-gen. DO NOT EDIT.

package example

import (
	"time"

	"github.com/golang/glog"
	"k8s.io/apimachinery/pkg/util/wait"
	apps_v1beta2 "k8s.io/client-go/informers/apps/v1beta2"
	core_v1 "k8s.io/client-go/informers/core/v1"
	informers_storage_v1 "k8s.io/client-go/informers/storage/v1"
	kubernetes "k8s.io/client-go/kubernetes"
	v1beta2 "k8s.io/client-go/listers/apps/v1beta2"
	v1 "k8s.io/client-go/listers/core/v1"
	storage_v1 "k8s.io/client-go/listers/storage/v1"
	cache "k8s.io/client-go/tools/cache"
	workqueue "k8s.io/client-go/util/workqueue"
)

type Controller struct {
	client kubernetes.Interface

	deploymentLister         v1beta2.DeploymentLister
	deploymentListerSynced   cache.InformerSynced
	podLister                v1.PodLister
	podListerSynced          cache.InformerSynced
	serviceLister            v1.ServiceLister
	serviceListerSynced      cache.InformerSynced
	storageClassLister       storage_v1.StorageClassLister
	storageclassListerSynced cache.InformerSynced

	deploymentQueue   workqueue.RateLimitingInterface
	podQueue          workqueue.RateLimitingInterface
	serviceQueue      workqueue.RateLimitingInterface
	storageClassQueue workqueue.RateLimitingInterface
}

func NewController(
	client kubernetes.Interface,
	deploymentInformer apps_v1beta2.DeploymentInformer,
	podInformer core_v1.PodInformer,
	serviceInformer core_v1.ServiceInformer,
	storageClassInformer informers_storage_v1.StorageClassInformer,
) *Controller {
	ctrl := &Controller{
		client:            client,
		deploymentQueue:   workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "Deployment"),
		podQueue:          workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "Pod"),
		serviceQueue:      workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "Service"),
		storageClassQueue: workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "StorageClass"),
	}

	deploymentInformer.Informer().AddEventHandler(
		cache.ResourceEventHandlerFuncs{
			AddFunc:    func(obj interface{}) { ctrl.enqueueWork(ctrl.deploymentQueue, obj) },
			UpdateFunc: func(oldObj, newObj interface{}) { ctrl.enqueueWork(ctrl.deploymentQueue, newObj) },
			DeleteFunc: func(obj interface{}) { ctrl.enqueueWork(ctrl.deploymentQueue, obj) },
		},
	)
	podInformer.Informer().AddEventHandler(
		cache.ResourceEventHandlerFuncs{
			AddFunc:    func(obj interface{}) { ctrl.enqueueWork(ctrl.podQueue, obj) },
			UpdateFunc: func(oldObj, newObj interface{}) { ctrl.enqueueWork(ctrl.podQueue, newObj) },
			DeleteFunc: func(obj interface{}) { ctrl.enqueueWork(ctrl.podQueue, obj) },
		},
	)
	serviceInformer.Informer().AddEventHandler(
		cache.ResourceEventHandlerFuncs{
			AddFunc:    func(obj interface{}) { ctrl.enqueueWork(ctrl.serviceQueue, obj) },
			UpdateFunc: func(oldObj, newObj interface{}) { ctrl.enqueueWork(ctrl.serviceQueue, newObj) },
			DeleteFunc: func(obj interface{}) { ctrl.enqueueWork(ctrl.serviceQueue, obj) },
		},
	)
	storageClassInformer.Informer().AddEventHandler(
		cache.ResourceEventHandlerFuncs{
			AddFunc:    func(obj interface{}) { ctrl.enqueueWork(ctrl.storageClassQueue, obj) },
			UpdateFunc: func(oldObj, newObj interface{}) { ctrl.enqueueWork(ctrl.storageClassQueue, newObj) },
			DeleteFunc: func(obj interface{}) { ctrl.enqueueWork(ctrl.storageClassQueue, obj) },
		},
	)

	ctrl.deploymentLister = deploymentInformer.Lister()
	ctrl.deploymentListerSynced = deploymentInformer.Informer().HasSynced
	ctrl.podLister = podInformer.Lister()
	ctrl.podListerSynced = podInformer.Informer().HasSynced
	ctrl.serviceLister = serviceInformer.Lister()
	ctrl.serviceListerSynced = serviceInformer.Informer().HasSynced
	ctrl.storageClassLister = storageClassInformer.Lister()
	ctrl.storageclassListerSynced = storageClassInformer.Informer().HasSynced

	return ctrl
}

func (ctrl *Controller) Run(stopCh <-chan struct{}) {
	defer ctrl.deploymentQueue.ShutDown()
	defer ctrl.podQueue.ShutDown()
	defer ctrl.serviceQueue.ShutDown()
	defer ctrl.storageClassQueue.ShutDown()

	glog.Infof("Starting example controller")
	defer glog.Infof("Shutting down example Controller")

	if !cache.WaitForCacheSync(stopCh, ctrl.deploymentListerSynced, ctrl.podListerSynced, ctrl.serviceListerSynced, ctrl.storageclassListerSynced) {
		return
	}

	go wait.Until(ctrl.deploymentWorker, time.Second, stopCh)
	go wait.Until(ctrl.podWorker, time.Second, stopCh)
	go wait.Until(ctrl.serviceWorker, time.Second, stopCh)
	go wait.Until(ctrl.storageClassWorker, time.Second, stopCh)

	<-stopCh
}

func (ctrl *Controller) enqueueWork(queue workqueue.Interface, obj interface{}) {
	// Beware of "xxx deleted" events
	if unknown, ok := obj.(cache.DeletedFinalStateUnknown); ok && unknown.Obj != nil {
		obj = unknown.Obj
	}
	objName, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)
	if err != nil {
		glog.Errorf("failed to get key from object: %v", err)
		return
	}
	glog.V(5).Infof("enqueued %q for sync", objName)
	queue.Add(objName)
}
